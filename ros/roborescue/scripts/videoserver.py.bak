#!/usr/bin/python

import pygst
import gst

#### Command-line commands ####

# gst-launch v4l2src device=/dev/v4l/by-id/usb-OmniVision_Technologies__Inc._USB_Camera-B3.04.06.1-video-index0  ! 'video/x-raw-yuv,width=320,height=240' ! ffmpegcolorspace ! jpegenc ! rtpjpegpay ! udpsink host=192.168.0.53 port=9000

# gst-launch v4l2src device=/dev/v4l/by-id/usb-046d_HD_Webcam_C525_36C31260-video-index0 ! 'image/jpeg,width=320,height=240' ! rtpjpegpay ! udpsink host=192.168.0.53 port=9000

class VideoServer:

	DEVICE_ID_PATH = '/dev/v4l/by-id'
	HWID_CAM1 = 'usb-046d_HD_Webcam_C525_36C31260-video-index0'
	HWID_CAM2 = 'usb-OmniVision_Technologies__Inc._USB_Camera-B3.04.06.1-video-index0'
	HWPATH_CAM1 = '{0}/{1}'.format(self.DEVICE_ID_PATH, self.HWID_CAM1)
	HWPATH_CAM2 = '{0}/{1}'.format(self.DEVICE_ID_PATH, self.HWID_CAM2)

	HOST = '192.168.0.53'				# operator station ip
	PORT_CAM1 = 9000
	PORT_CAM2 = 9002
	
	def __init__(self):
		self.init_camera1()
		self.init_camera2()
		
	def init_camera1(self):
		# initialize camera 1 pipeline
		self.cam1pipeline = gst.Pipeline('cam1pipeline')
		
		# camera 1 source
		self.cam1src = gst.element_factory_make('v4l2src', 'cam1src')
		self.cam1src.set_property('device', self.HWPATH_CAM1)
		
		# camera 1 attributes cap
		self.cam1cap1 = gst.element_factory_make('cap', 'cam1cap1')
		self.cam1cap1.set_property('type', 'image/jpeg')
		self.cam1cap1.set_property('width', '320')
		self.cam1cap1.set_property('height', '240')
		
		# camera 1 payload
		self.cam1payload = gst.element_factory_make('rtpjpegpay', 'cam1payload')
		
		# camera 1 sink
		self.cam1sink = gst.element_factory_make('udpsink', 'cam1sink')
		self.cam1sink.set_property('host', self.HOST)
		self.cam1sink.set_property('port', self.PORT_CAM1)
		
		# add elements to pipeline
		self.cam1pipeline.add(self.cam1src)
		self.cam1pipeline.add(self.cam1cap1)
		self.cam1pipeline.add(self.cam1payload)
		self.cam1pipeline.add(self.cam1sink)
		
		# link elements in payload
		self.cam1src.link(self.cam1cap1)
		self.cam1cap1.link(self.cam1payload)
		self.cam1payload.link(self.cam1sink)
		
		# run pipeline
		self.cam1pipeline.set_state(gst.STATE_PLAYING)
		
	def init_camera2(self):
		# initialize camera 2 pipeline
		self.cam2pipeline = gst.Pipeline('cam2pipeline')
		
		# camera 2 source
		self.cam2src = gst.element_factory_make('v4l2src', 'cam2src')
		self.cam2src.set_property('device', self.HWPATH_CAM2)
		
		# camera 2 attributes cap
		self.cam2cap1 = gst.element_factory_make('cap', 'cam2cap1')
		self.cam2cap1.set_property('type', 'video/x-raw-yuv')
		self.cam2cap1.set_property('width', '320')
		self.cam2cap1.set_property('height', '240')
		
		# camera 2 colorspace converter
		self.cam2conv = gst.element_factory_make('ffmpegcolorspace', 'cam2conv')
		
		# camera 2 encoder
		self.cam2enc = gst.element_factory_make('jpegenc', 'cam2enc')
		
		# camera 2 payload
		self.cam2payload = gst.element_factory_make('rtpjpegpay', 'cam2payload')
		
		# camera 2 sink
		self.cam2sink = gst.element_factory_make('udpsink', 'cam2sink')
		self.cam2sink.set_property('host', self.HOST)
		self.cam2sink.set_property('port', self.PORT_CAM2)
		
		# add elements to pipeline
		self.cam2pipeline.add(self.cam2src)
		self.cam2pipeline.add(self.cam2cap1)
		self.cam2pipeline.add(self.cam2conv)
		self.cam2pipeline.add(self.cam2enc)
		self.cam2pipeline.add(self.cam2payload)
		self.cam2pipeline.add(self.cam2sink)
		
		# link elements in payload
		self.cam2src.link(self.cam2cap1)
		self.cam2cap1.link(self.cam2conv)
		self.cam2conv.link(self.cam2enc)
		self.cam2enc.link(self.cam2payload)
		self.cam2payload.link(self.cam2sink)
		
		# run pipeline
		self.cam2pipeline.set_state(gst.STATE_PLAYING)
		
def main():
	vs = VideoServer()
		
if __name__ == "__main__":
	main()
